contract CoopInterface = 
    entrypoint is_wallet_active : (address) => bool

contract Organization =

    datatype event =
        OrganizationCreated

    record state = {
        coop       : CoopInterface,
        owner      : address,
        members    : map(address, bool) }
    
    stateful entrypoint init(coop: CoopInterface) : state =
        require(
            coop.is_wallet_active(Call.origin),
            "#Can not create organization. Creator must be registered platform user with activated wallet.#")
        Chain.event(OrganizationCreated)
        { coop = coop,
          owner = Call.origin, 
          members = {} }
    
    stateful entrypoint add_member(member: address) =
        only_owner()
        only_active_organization()
        only_active_wallet(member, "#Member to be added to organization has to be registered platform user with active wallet.#")
        put(state{ members[member] = false })
    
    stateful entrypoint confirm_membership() =
        only_active_organization()
        only_active_wallet(Call.origin, "")

        let approval = Map.lookup(Call.origin, state.members)
        switch(approval)
            None => abort("#Trying to accept organization invite which does not exist!#")
            Some(membershipConfirmed) =>
                if (membershipConfirmed)
                    abort("#Trying to accept organization invite but it was already accepted!#")
                else
                    put(state{ members[Call.origin] = true })
    
    entrypoint owner() : address = state.owner

    entrypoint coop() : CoopInterface = state.coop

    entrypoint is_verified() : bool = state.coop.is_wallet_active(Contract.address)

    entrypoint is_member(member: address) = state.members[member = false]

    function only_owner() =
        require(Call.origin == state.owner, "#Only organization owner can make this action!#")

    function only_active_wallet(wallet: address, errorMsg: string) =
        let message = if (errorMsg == "") "#Only registered platform member with active wallet can make this action.#" else errorMsg
        require(
            state.coop.is_wallet_active(wallet),
            message)
    
    function only_active_organization() =
        require(
            state.coop.is_wallet_active(Contract.address),
            "#In order to make this action organization must have active wallet!#")