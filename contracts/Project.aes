contract TokenInterface =
    entrypoint allowance : (address, address) => int
    entrypoint approve : (address, int) => bool
    entrypoint transfer : (address, int) => bool
    entrypoint transfer_from : (address, address, int) => bool
    entrypoint balance_of : (address) => int
    entrypoint owner: () => address

contract CoopInterface =
    entrypoint token : () => TokenInterface
    entrypoint owner : () => address
    entrypoint is_wallet_active : (address) => bool

contract OrgInterface =
    entrypoint is_verified : () => bool
    entrypoint coop : () => CoopInterface
    entrypoint owner : () => address

contract SellOfferInterface =
    entrypoint get_offer: () => (int * int * address * map(address, int))
    entrypoint activate_offer : () => unit

contract Project =

    datatype event =
        StartRevenuePayout(int)
      | RevenueSharePayout(address, int)
      | ProjectCreated
      | NewInvestment(address, int)
      | InvestmentCanceled(address, int)
      | ApproveWithdrawProjectFunds(address, int)
      | ApproveTransferProjectShares(address, address, int)
      | SharesTransferred(address, address, int)
      | SellOfferActivated(address, address)

    record state = {
        organization                        : OrgInterface,
        minInvestmentPerUser                : int,
        maxInvestmentPerUser                : int,
        investmentCap                       : int,
        endsAt                              : int,
        canCancelInvestmentUnconditionally  : bool,
        investors                           : map(int, address),
        investments                         : map(address, int),
        totalFundsRaised                    : int,
        payoutInProcess                     : bool,
        revenueToSplit                      : int,
        nextInvestorPayoutIndex             : int,
        revenue_mint_batch_size             : int,
        allowed                             : map((address * address), int) }

    stateful entrypoint init(
        organization: OrgInterface, 
        minInvestmentPerUser: int,
        maxInvestmentPerUSer: int,
        investmentCap: int,
        endsAt: int
        ) : state =

        require(
            Call.origin == organization.owner(),
            "#Must be organization owner to be able to create project for funding.#")
        require(
            organization.is_verified(),
            "#Organization must have an active wallet before it can create new project for funding#.")
        
        Chain.event(ProjectCreated)

        { organization = organization,
          minInvestmentPerUser = minInvestmentPerUser,
          maxInvestmentPerUser = maxInvestmentPerUSer,
          investmentCap = investmentCap,
          endsAt = endsAt,
          canCancelInvestmentUnconditionally = false,
          investors = {},
          investments = {},
          allowed = {},
          totalFundsRaised = 0,
          payoutInProcess = false,
          revenueToSplit = 0,
          nextInvestorPayoutIndex = 0,
          revenue_mint_batch_size = 10 }   // rethink about this constant (what value should it be? can we change it afterwards? etc..)
    
    stateful entrypoint set_cancel_investment_flag(allow: bool) =
        require(
            only_organization_admin(),
            "#Only organization owner can allow or disallow unconditional investment cancellation!#")
        put(state{ canCancelInvestmentUnconditionally = allow })

    stateful entrypoint add_investments(investmentsList: list((address * int))) =
        require(
            Call.origin == state.organization.coop().owner(),
            "#Only platform manager can manually add new investments!#")

        require(
            !is_completely_funded(), 
            "#Can not add new investments. Project already completely funded.#")

        require(
            !has_funding_expired(),
            "#Can not add new investments. Project expired before it was completely funded.#")

        recursive_investment_add(investmentsList)

    stateful entrypoint invest(investor: address) =
        let token = state.organization.coop().token()
        let amount = token.allowance(investor, Contract.address)
        
        check_investment_preconditions(investor, amount)
        token.transfer_from(investor, Contract.address, amount)
        _persist_investment(investor, amount)

        Chain.event(NewInvestment(investor, amount))

    stateful entrypoint cancel_investment() =
        let investor = Call.caller
        let investment = state.investments[investor = 0]
        require(
            can_cancel_investment(investor),
            "#Can not cancel investment!#")
        state.organization.coop().token().transfer(investor, investment)
        put(state{
            investments[investor] = 0,
            totalFundsRaised @ raised = raised - investment })
        Chain.event(InvestmentCanceled(investor, investment))

    stateful entrypoint withdraw(amount: int) =
        require(
            is_completely_funded(),
            "#Project investment cap not reached! Can not withdraw funds.#")
        
        require(
            only_organization_admin(),
            "#Only organization owner can request withdrawal of project funds.#")

        require(
            !state.payoutInProcess,
            "#Can not withdraw funds while revenue share payout is in process.#")

        let tokenIssuer = state.organization.coop().token().owner()
        state.organization.coop().token().approve(tokenIssuer, amount)
        Chain.event(ApproveWithdrawProjectFunds(tokenIssuer, amount))
    
    stateful entrypoint transfer_shares(from: address, to: address, amount: int) =
        let caller = Call.caller

        _transfer_shares(from, to, amount)

    stateful entrypoint activate_sell_offer(offer: SellOfferInterface) =
        let info = offer.get_offer()
        let caller = Call.origin
        switch(info)
            (shares, price, project, counterOffers) =>
                _approve(offer.address, shares)
                offer.activate_offer()
        Chain.event(SellOfferActivated(caller, offer.address))

    stateful entrypoint start_revenue_shares_payout(revenue: int) =
        check_share_payout_preconditions(Call.origin, revenue)

        put(state{
            revenueToSplit = revenue,
            payoutInProcess = true,
            nextInvestorPayoutIndex = 0 })

        Chain.event(StartRevenuePayout(revenue))
    
    stateful entrypoint payout_revenue_shares() : bool =
        
        require(
            state.payoutInProcess,
            "#Revenue share payout has to be started before actual payout process is executed.#")

        let numOfInvestors = Map.size(state.investors)
        
        let lastInvestorIndex = numOfInvestors - 1
        let lastBatchIndex = state.nextInvestorPayoutIndex + state.revenue_mint_batch_size - 1

        let fromIndex = state.nextInvestorPayoutIndex
        let toIndex =
            if (lastInvestorIndex < lastBatchIndex)
                lastInvestorIndex
            else
                lastBatchIndex
        
        let revenue = state.revenueToSplit

        if (toIndex == lastInvestorIndex)
            put(state{
                payoutInProcess = false,
                revenueToSplit = 0,
                nextInvestorPayoutIndex = 0 })
        else
            put(state{ nextInvestorPayoutIndex = toIndex + 1 })
        
        recursive_revenue_batch_payout(fromIndex, toIndex, revenue)
        state.payoutInProcess

    entrypoint get_project_info() : (int * int * int * int * int * bool) = (state.minInvestmentPerUser, state.maxInvestmentPerUser, state.investmentCap, state.endsAt, state.totalFundsRaised, state.payoutInProcess)

    entrypoint get_token() : TokenInterface = state.organization.coop().token()

    entrypoint get_investment(investor: address) : int = state.investments[investor = 0]

    entrypoint get_investments() : map(address, int) = state.investments

    entrypoint get_investors() : list((int * address)) = Map.to_list(state.investors)

    entrypoint has_funding_expired() : bool = Chain.timestamp > state.endsAt

    entrypoint total_funds_raised() : int = state.totalFundsRaised

    entrypoint is_completely_funded() : bool = state.totalFundsRaised == state.investmentCap

    entrypoint can_cancel_investment(investor) : bool =
        let investment = state.investments[investor = 0]
        (investment > 0 && !state.payoutInProcess && (state.canCancelInvestmentUnconditionally || !is_completely_funded()))

    function only_organization_admin() : bool = Call.origin == state.organization.owner()

    stateful function recursive_revenue_batch_payout(
        currentInvestorIndex: int, 
        lastInvestorIndex: int,
        revenue: int) =
        let investor = state.investors[currentInvestorIndex]
        let investment = state.investments[investor]

        if (investment > 0)
            let share = revenue * investment / state.totalFundsRaised
            state.organization.coop().token().transfer(investor, share)
            Chain.event(RevenueSharePayout(investor, share))
        
        if (currentInvestorIndex < lastInvestorIndex)
            recursive_revenue_batch_payout(currentInvestorIndex + 1, lastInvestorIndex, revenue)


    stateful function recursive_investment_add(investments: list((address * int))) : int =
        switch (investments)
            investment::investments' =>
                switch (investment)
                    (addr, amount) =>
                        check_investment_preconditions(addr, amount)
                        _persist_investment(addr, amount)
                1 + recursive_investment_add(investments')
            [] => 0
            

    entrypoint check_investment_preconditions(investor: address, amount: int) =
        let usersPreviousTotalInvestment = state.investments[investor = 0]
        let usersNewTotalInvestment = usersPreviousTotalInvestment + amount
        let projectNewTotalInvestment = state.totalFundsRaised + amount
        let projectRemainingTotalInvestment = state.investmentCap - projectNewTotalInvestment

        require(
            state.totalFundsRaised < state.investmentCap, 
            "#Can not invest, project already completely funded.#")

        require(
            amount > 0,
            "#Can not invest zero tokens!#")

        require(
            state.organization.coop().token().balance_of(investor) >= amount,
            "#Can not invest. Insufficient funds.#")
        
        require(
            usersNewTotalInvestment =< state.maxInvestmentPerUser,
            "#User's investment will surpass maximum per user investment for this project. Aborting.#")

        require(
            usersNewTotalInvestment >= state.minInvestmentPerUser,
            "#User's investment does not meet required minimum per user investment for this project. Aborting.#")
        
        require(
            projectNewTotalInvestment =< state.investmentCap,
            "#User's investment will make total funds raised greater than project's investment cap. Aborting.#")

        require(
            projectRemainingTotalInvestment == 0 || projectRemainingTotalInvestment >= state.minInvestmentPerUser,
            "#User's investment will leave tiny fraction of project non-funded. Enlarge your investment. Aborting.#")

        require(
            !has_funding_expired(),
            "#Project funding has ended.#")

    entrypoint check_share_payout_preconditions(caller: address, revenue: int) =
        require(
            caller == state.organization.owner(),
            "#Only organization owner can initiate revenue shares payout.#")

        require(
            is_completely_funded(),
            "#Can not start revenue share payout on project which is still in funding phase.#")

        require(
            revenue > 0,
            "#Revenue is zero. Aborting.#")

        require(
            state.organization.coop().token().balance_of(Contract.address) >= revenue,
            "#Can not start revenue share payout. Project balance too low. Mint revenue to project wallet and try again.#")
        
        require(
            !state.payoutInProcess,
            "#Can not start revenue share payout. It is already started!#")

    stateful function _persist_investment(investor: address, amount: int) = 
        if (!Map.member(investor, state.investments))
            let newInvestorIndex = Map.size(state.investors)
            put(state{ investors[newInvestorIndex] = investor })

        put(state{
            investments[investor = 0] @ investment = investment + amount,
            totalFundsRaised @ raised = raised + amount })
    
    stateful function _approve(spender: address, value: int) : bool = 
        let caller = Call.origin
        require(state.organization.coop().is_wallet_active(caller), "#Wallet not activated. Wallet has to be activated before making this action.#")
        require(value > 0, "#Amount of shares to be approved for transfer must be grater than 0.#")
        require(value =< state.investments[caller = 0], "#Shares balance too low!#")

        put(state{ allowed[(caller, spender)] = value })
        Chain.event(ApproveTransferProjectShares(caller, spender, value))
        true    
    
    stateful function _transfer_shares(from: address, to: address, amount: int) =
        let caller = Call.caller
        let approvedAmount = state.allowed[(from, caller) = 0]
        let availableShares = state.investments[from = 0]
        require(
            is_completely_funded(),
            "#Error: can not transfer shares. Project is still in funding phase.#")
        require(
            !state.payoutInProcess,
            "#Error: can not transfer shares. Project is in revenue share payout state.#")
        require(
            availableShares >= amount,
            "#Error: can not transfer shares. Insufficient amount of shares to transfer.#")
        require(
            approvedAmount >= amount,
            "#Error: can not transfer shares. Need approval.#")
        require(
            state.organization.coop().is_wallet_active(from),
            "#Error: can not transfer shares. Sender not active Cooperative member.#")
        require(
            state.organization.coop().is_wallet_active(to),
            "#Error: can not transfer shares. Receiver not active Cooperative member.#")
        if (!Map.member(to, state.investments))
            let newInvestorIndex = Map.size(state.investors)
            put(state{ investors[newInvestorIndex] = to })
        put(state{
            investments[to = 0] @ investment = investment + amount, 
            investments[from] @ investment = investment - amount,
            allowed[(from, caller)] @ approvedForTransfer = approvedForTransfer - amount })