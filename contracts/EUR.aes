contract CoopInterface =
    entrypoint is_wallet_active : (address) => bool

contract EUR =

  datatype event =
      TokensMinted(address, int)
    | ApproveSpender(address, int)
    | TokensBurned(address, int)
    | EurOwnershipChanged(address)

  record state = {
    owner            : address,
    totalSupply      : int,
    balances         : map(address, int),
    allowed          : map((address * address), int),
    coop             : CoopInterface,
    claimOwnershipCalled : bool,
    claimOwnershipEnabled : bool }

  stateful entrypoint init(coop : CoopInterface) : state =
    { owner       = Call.origin,
      totalSupply = 0,
      balances    = {},
      allowed     = {},
      coop        = coop,
      claimOwnershipCalled = false,
      claimOwnershipEnabled = false }

  entrypoint owner() : address = state.owner

  entrypoint total_supply() : int = state.totalSupply

  entrypoint balance_of(who: address) : int = lookup_by_address(who, state.balances, 0)

  entrypoint allowance(owner: address, spender: address) : int = Map.lookup_default((owner, spender), state.allowed, 0)

  stateful entrypoint claim_ownership(newOwner: address) =
    require(state.claimOwnershipEnabled, "#Error: claim ownership feature is disabled. Aborting.#")
    require(!state.claimOwnershipCalled, "#Error: trying to claim ownership more than once. Aborting.#")
    put(state{
        owner = newOwner,
        claimOwnershipCalled = true })
    Chain.event(EurOwnershipChanged(newOwner))

  stateful entrypoint transfer_ownership(newOwner: address) =
    only_owner("")
    put(state{ owner = newOwner })
    Chain.event(EurOwnershipChanged(newOwner))

  stateful entrypoint transfer(to: address, value: int) : bool =
    let caller = Call.caller
    only_coop_user(caller, "#Sender wallet not activated. Activate your blockchain wallet before sending funds.#")
    only_coop_user(to, "#Receiver wallet not activated. Transfer aborted.#")
    _transfer(caller, to, value)

  stateful entrypoint approve(spender: address, value: int) : bool = 
    let caller = Call.caller
    only_coop_user(caller, "#Wallet not activated. Activate your wallet before approving funds withdrawal.#")
    require(value > 0, "#Amount of funds to be approved for withdrawal must be grater than 0.#")
    // require(spender != #0, "Invalid spender address")

    put(state{ allowed[(caller, spender)] = value })
    Chain.event(ApproveSpender(spender, value))
    true

  stateful function _transfer(from: address, to: address, value: int) : bool =
    require(value > 0, "#Amount of funds to transfer must be grater than 0.#")
    require(value =< balance_of(from), "#Insufficient funds on user's wallet to make the transfer.#")
    // require(to != #0, "Invalid address")

    put(state{
      balances[from] = balance_of(from) - value,
      balances[to] = balance_of(to) + value})

    true

  stateful entrypoint transfer_from(from: address, to: address, value: int) : bool =
    let caller = Call.caller
    only_coop_user(from, "#Sender wallet not activated. Sender has to have activated blockchain wallet before approving funds for transfer.#")
    only_coop_user(to, "#Receiver wallet not activated. Receiver has to have activated blockchain wallet before receiving any funds.#")
    
    require(state.allowed[(from, caller)] >= value, "")
      
    put(state{ allowed[(from, caller)] = state.allowed[(from, caller)] - value })
    _transfer(from, to, value)

    true

  stateful entrypoint mint(account: address, value: int) : bool =
    only_owner("")
    only_coop_user(account, "#Only registered platform users with active wallets can get their deposits approved. Aborting.#")
    // require(account != #0, "Invalid address")

    put(state{ totalSupply = state.totalSupply + value,
          balances[account] = balance_of(account) + value })
    Chain.event(TokensMinted(account, value))
    true

  stateful entrypoint burn(account: address, value: int) : bool =
    let caller = Call.caller
    only_owner("")
    only_coop_user(account, "#Only registered platform users with active wallets can withdraw funds. Aborting.#")
    require(state.allowed[(account, caller)] >= value, "#Value to be withdrawn is bigger than allowed.#")
    require(state.balances[account] >= value, "#Value to be withdrawn is not present.#")

    put(state{ totalSupply = state.totalSupply - value,
          balances[account] = balance_of(account) - value })
    Chain.event(TokensBurned(account, value))
    true

  function lookup_by_address(k : address, m, v) = Map.lookup_default(k, m, v)

  function only_owner(errMsg: string) =
    let message = if (errMsg == "") "#Only Token Issuer can make this action!#" else errMsg
    let caller = Call.caller
    require(caller == state.owner, message)

  function only_coop_user(wallet: address, errMsg: string) =
    let message = if (errMsg == "") "#Only registered platform user with activated wallet can make this action!#" else errMsg
    require(state.coop.is_wallet_active(wallet), errMsg)
