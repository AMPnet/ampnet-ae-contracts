contract CoopInterface =
    entrypoint is_wallet_active : (address) => bool

contract EUR =

  datatype event =
      TokensMinted(address, int)
    | ApproveSpender(address, int)
    | TokensBurned(address, int)

  record state = {
    owner            : address,
    totalSupply      : int,
    balances         : map(address, int),
    allowed          : map((address,address), int),
    coop             : CoopInterface }

  stateful entrypoint init(coop : CoopInterface) : state =
    { owner       = Call.caller,
      totalSupply = 0,
      balances    = {},
      allowed     = {},
      coop        = coop }

  function lookup_by_address(k : address, m, v) = Map.lookup_default(k, m, v)
      
  stateful entrypoint transfer_ownership(newOwner: address) =
    only_owner()
    put(state{ owner = newOwner })

  entrypoint total_supply() : int = state.totalSupply

  entrypoint balance_of(who: address) : int = lookup_by_address(who, state.balances, 0)

  entrypoint allowance(owner: address, spender: address) : int = Map.lookup_default((owner, spender), state.allowed, 0)

  stateful entrypoint transfer(to: address, value: int) : bool =
    only_coop_user(Call.caller)
    only_coop_user(to)
    _transfer(Call.caller, to, value)

  stateful entrypoint approve(spender: address, value: int) : bool = 
    only_coop_user(Call.caller)
    if (spender != state.owner)
      only_coop_user(spender)

    require(value > 0, "Value is sub zero")
    // require(spender != #0, "Invalid spender address")

    put(state{ allowed[(Call.caller, spender)] = value })
    Chain.event(ApproveSpender(spender, value))
    true

  stateful function _transfer(from: address, to: address, value: int) : bool =
    require(value > 0, "Value is sub zero")
    require(value =< balance_of(from), "Not enough balance")
    // require(to != #0, "Invalid address")

    put(state{
      balances[from] = balance_of(from) - value,
      balances[to] = balance_of(to) + value})

    true

  stateful entrypoint transfer_from(from: address, to: address, value: int) : bool =
    only_coop_user(Call.caller)
    only_coop_user(from)
    only_coop_user(to)
    
    require(state.allowed[(from, Call.caller)] >= value, "Value is bigger than allowed")
      
    put(state{ allowed[(from, Call.caller)] = state.allowed[(from, Call.caller)] - value })
    _transfer(from, to, value)

    true

  stateful entrypoint increase_allowance(spender: address, addedValue: int) : bool =
    // require(spender != #0, "Invalid address")
    only_coop_user(Call.caller)
    only_coop_user(spender)
    put(state{ allowed[(Call.caller, spender)] = state.allowed[(Call.caller, spender)] + addedValue })

    true

  stateful entrypoint decrease_allowance(spender: address, subtractedValue: int) : bool =
    // require(spender != #0, "Invalid address")
    only_coop_user(Call.caller)
    only_coop_user(spender)
    put(state{ allowed[(Call.caller, spender)] = state.allowed[(Call.caller, spender)] - subtractedValue })

    true

  stateful entrypoint mint(account: address, value: int) : bool =
    only_owner()
    only_coop_user(account)
    // require(account != #0, "Invalid address")

    put(state{ totalSupply = state.totalSupply + value,
          balances[account] = balance_of(account) + value })
    Chain.event(TokensMinted(account, value))
    true

  stateful entrypoint burn(account: address, value: int) : bool =
    only_owner()
    only_coop_user(account)
    require(state.allowed[(account, Call.caller)] >= value, "Value to be burned is bigger than allowed.")
    require(state.balances[account] >= value, "Value to be burned is not present")

    put(state{ totalSupply = state.totalSupply - value,
          balances[account] = balance_of(account) - value })
    Chain.event(TokensBurned(account, value))
    true

  function only_owner() =
      require(Call.caller == state.owner, "Only owner can mint!")

  function only_coop_user(wallet: address) =
    require(state.coop.is_wallet_active(wallet), "Only registered Cooperative user can make this action!")
