contract TokenInterface =
    function balanceOf : (address) => (int)

contract Coop =
    record state = {
        _owner                      : address,
        _activeWallets              : map(address, bool),
        _token                      : option(TokenInterface) }
    
    public stateful function init() : state =
        { _owner = Call.caller,
          _activeWallets = {},
          _token = None }
    
    public stateful function setToken(token: TokenInterface) =
        onlyOwner()
        put(state{_token = Some(token)})

    public stateful function addWallet(wallet: address) =
        onlyOwner()
        put(state{_activeWallets[wallet] = true})

    public function isWalletActive(wallet: address) : bool = state._activeWallets[wallet]

    public function owner(): address = state._owner

    public function token(): address =
        switch(state._token)
            None => abort("Cooperative has no token provided!")
            Some(token) => token.address

    public function balance_of(wallet: address): int =
        switch(state._token)
            None => 13
            Some(token) => token.balanceOf(wallet)

    private function require(b : bool, err : string) =
        if(!b) 
            abort(err)

    private function onlyOwner() =
        require(Call.caller == state._owner, "Only owner can make this action!")
    
    public function test() : int = 42